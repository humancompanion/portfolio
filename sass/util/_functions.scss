// -----------------------------------------------------------------------------
// Typography

// -----------------------------------------------------------------------------
// Breakpoints
$breakpoints: (
  "(min-width: 15em)" "XS",       //  240px at 16px base font
  "(min-width: 20em)" "S",        //  320px at 16px base font
  "(min-width: 30em)" "SM",       //  480px at 16px base font
  "(min-width: 35em)" "M",        //  560px at 16px base font
  "(min-width: 42em)" "MML",      //  672px at 16px base font
  "(min-width: 48em)" "ML",       //  768px at 16px base font
  "(min-width: 54em)" "MLL",      //  864px at 16px base font
  "(min-width: 61.25em)" "L",     //  980px at 16px base font
  "(min-width: 64em)" "XL",       // 1024px at 16px base font
  "(min-width: 78.75em)" "XXL"    // 1260px at 16px base font
);

//  From HugoG: http://hugogiraudel.com/2014/01/13/sass-string-replacement-function/
// http://sassmeister.com/gist/1b4f2da5527830088e4d
// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin breakpoint($point, $direction: "up") {
  @each $breakpoint in $breakpoints {
    $query: nth($breakpoint, 1);
    $name: nth($breakpoint, 2);

    @if $direction == up {
      @if ($name == $point) {
        @media #{$query} { @content }
      }
    } @else {
      @if ($name == $point) {
        @media #{str-replace($query, "min", "max")} {
          @content
        }
      }
    }
  }
}

// -----------------------------------------------------------------------------
// Text-indent method for hiding text
@mixin hide-text {
  text-indent: -888em;
  overflow: hidden;
}

// -----------------------------------------------------------------------------
// Obscuring text to hide text; preferred, though not always possible.
@mixin hide-text_alt {
  font: 0/0 a;
  color: transparent;
}

// -----------------------------------------------------------------------------
// Technically accessible method for hiding text
@mixin hide-text_access {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  padding:0 !important;
  margin:0 !important;
  border:0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden;
}

// -----------------------------------------------------------------------------
// Add percentage of white to a color
@function tint($color, $percent){
    @return mix(white, $color, $percent);
}

// -----------------------------------------------------------------------------
// Add percentage of black to a color
@function shade($color, $percent){
    @return mix(black, $color, $percent);
}

// -----------------------------------------------------------------------------
// Clearfix
@mixin clear {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear:both;
    }
    *zoom: 1;
}

// -----------------------------------------------------------------------------
// Font Smoothing
@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    } @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

// -----------------------------------------------------------------------------
// Placholder prefixed
@mixin placeholder {
    &::-webkit-input-placeholder { @content }
    &:-moz-placeholder           { @content }
    &::-moz-placeholder          { @content }
    &:-ms-input-placeholder      { @content }
}

// -----------------------------------------------------------------------------
// Target touch devices
//
// Currently experimental, relies on current knowledge that Firefox (which DOES
// support touch events, does not support websqldatabase or cssreflections.
// Very very very very prototype-quality.
// Known to work on iOS devices, not yet tested beyond that.

@mixin touch-only() {
    .touch.websqldatabase.cssreflections & {
        @content
    }
}


// -----------------------------------------------------------------------------
// list-columns: Takes a long (unordered) list and breaks it into columns
@mixin list-columns($count: 2, $gutter_size: $size-medium) {
  -webkit-column-count: $count;
     -moz-column-count: $count;
      -ms-column-count: $count;
          column-count: $count;
  -webkit-column-gap: $gutter_size;
     -moz-column-gap: $gutter_size;
      -ms-column-gap: $gutter_size;
          column-gap: $gutter_size;
}
